.. Time-stamp: <2011-11-26 18:17 ycopin@lyopc469>
.. _exercices:

Exercices
=========

.. _carreMagique:

Carré magique
-------------

Un carré magique d’ordre *n* est un tableau carré *n × n* dans lequel
on écrit une et une seule fois les nombres entiers de 1 à *n²*, de
sorte que la somme des *n* nombres de chaque ligne, colonne ou
diagonale principale soit constante. P.ex. le carré magique d’ordre 5,
où toutes les sommes sont égales à 65:

==  ==  ==  ==  ==
11  18  25   2   9
10  12  19  21   3
 4   6  13  20  22
23   5   7  14  16
17  24   1   8  15
==  ==  ==  ==  ==

Pour les carrés magiques d’ordre impair, on dispose de l’algorithme
suivant -- *(i,j)* désignant la case de la ligne *i*, colonne *j* du
carré; on se place en outre dans une indexation « naturelle »
commençant à 1:

1. la case *(n,(n+1)/2)* contient 1 ;
2. si la case *(i,j)* contient la valeur *k*, alors on place la valeur
   *k+1* dans la case *(i+1,j+1)* si cette case est vide, ou dans la
   case *(i-1,j)* sinon. On respecte la règle selon laquelle un indice
   supérieur à *n* est ramené a 1.

Programmer cet algorithme pour pouvoir construire un carré magique
d’ordre impair quelconque.

.. carre 
.. `Une solution <../../../Exercices/solution.html?pneer?pneerZntvdhr.ugzy>`_


.. _koch:

Flocon de Koch
--------------

.. index::
   module: turtle

En utilisant les commandes `left`, `right` et `forward` de la
bibliothèque graphique standard `turtle` dans une fonction récursive,
générer à l'écran un `flocon de Koch
<http://fr.wikipedia.org/wiki/Flocon_de_Koch>`_ d'ordre arbitraire.

.. figure:: koch_3.*
   :align: center

   Flocon de Koch d'ordre 3.

.. koch
.. `Une solution <../../../Exercices/solution.html?xbpu?xbpu.cl>`_


Manipulation de tableaux
------------------------

.. _mad:

*Median Absolute Deviation*
'''''''''''''''''''''''''''

En statistique, le *Median Absolute Deviation* (MAD) est un estimateur
robuste de la dispersion d'un échantillon 1D: `MAD = median(| x -
median(x) |)`

À l'aide de la fonction `numpy.median`, écrire une fonction `mad(x,
axis=None)` calculant le MAD d'un tableau le long d'un de ses axes.

.. _pull:

Distribution du *pull*
''''''''''''''''''''''

Le *pull* est une quantité statistique permettant d'évaluer la
conformité des erreurs par rapport à une distribution de valeurs
(typiquement les résidus d'un ajustement).  Pour un échantillon
:math:`\mathbf{x} = [x_i]` et les erreurs associées
:math:`\mathrm{d}\mathbf{x} = [σ_i]`, le *pull* est défini par:

* Moyenne optimale (pondérée par la variance): :math:`E = (\sum_{i}
  x_i/\sigma_i^2)/(\sum_i 1/\sigma_i^2)`
* Erreur sur la moyenne pondérée: :math:`\sigma_E^2 =
  1/\sum(1/\sigma_i^2)`
* Définition du *pull*: :math:`p_i = (x_i - E_i)/(\sigma_{E_i}^2 +
  \sigma_i^2)^{1/2}`, où :math:`E_i` et :math:`\sigma_{E_i}` sont
  calculées *sans* le point *i*.

Si les erreurs :math:`\sigma_i` sont correctes, la distribution du
*pull* est centrée sur 0 avec une déviation standard de 1.

Écrire une fonction `pull(x, dx)` calculant le *pull* de tableaux 1D.

.. _algo:

Algorithmes numériques
----------------------

Intégration numérique de Romberg
''''''''''''''''''''''''''''''''

Écrire une fonction `integ_romberg(f, a, b, epsilon=1e-6)` permettant
de calculer l'intégrale numérique de la fonction *f* entre les bornes
*a* et *b* avec une précision *epsilon* selon la `méthode de Romberg
<http://fr.wikipedia.org/wiki/M%C3%A9thode_de_Romberg>`_.

Tester sur des solutions analytiques et en comparant à
`scipy.integrate.romberg`.

Méthode de Runge-Kutta
''''''''''''''''''''''

Développer un algorithme permettant d'intégrer numériquement une
équation différentielle du 1er ordre en utilisant la `méthode de
Runge-Kutta
<http://fr.wikipedia.org/wiki/M%C3%A9thodes_de_Runge-Kutta>`_ d'ordre
quatre.

Tester sur des solutions analytiques et en comparant à
`scipy.integrate.odeint`.


.. Test de maths
.. -------------

.. .. math:: mean = ( \frac{1}{N}\sum_{i=0}^{N-1} x_i^p} )^{1/p}

.. Local Variables: ...
.. mode: rst ...
.. ispell-local-dictionary: "francais" ...
.. End: ...
